{"version":3,"sources":["util/options/index.js","redux/initialState/index.js","body/index.jsx","redux/reducer/index.js","redux/store/index.js","index.jsx"],"names":["defaultOptions","isDev","isCms","cmsOverlay","reducer","preloadedState","defaultInitialAppState","pages","requesting","overrideInitialAppState","setInitialAppState","appState","getInitialAppState","Body","props","state","App","location","getCurrentPage","pageId","pathname","replace","getPageId","pageProps","getPageById","isLoading","getLoadingPage","compositeReducer","action","type","FETCH_PAGES","RECEIVE_PAGES","receivedPages","payload","PAGE_ACTION","pageAction","newPageState","PageReducer","pagesWithUpdatedPage","immutableReplace","combineReducers","initStore","externalReducers","devtools","store","runApp","options","rootElement","document","getElementyById","render","getCmsOverlay"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["\nexport const defaultOptions = {\n    //Is Development Instance?\n    isDev: false,\n    //CMS\n    isCms: false,\n    cmsOverlay: () => null,\n    //Redux\n    reducer: {},\n    preloadedState: {}\n}","\n\n\nconst defaultInitialAppState = {\n    pages: null,\n    requesting: false,\n    isCms: false\n}\n\nlet overrideInitialAppState = {}\n\nexport const setInitialAppState = (appState) => {\n    overrideInitialAppState = appState\n}\n\nexport const getInitialAppState = () => ({\n    ...defaultInitialAppState,\n    ...overrideInitialAppState\n})\n","import { useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\n\nconst Body = (props) => {\n    //Hooks\n    const pages = useSelector(state => state.App.pages)\n    const location = useLocation()\n    //Getters\n    const getPageId = () => {\n        const pathname = location.pathname\n        return (\n            (pathname === \"/\") ?\n                \"index\" : \n                pathname.replace(/^\\/|\\/$/g, '')\n        )\n    }\n    const getCurrentPage = () => {\n        const pageId = getPageId()\n        const pageProps = getPageById(pageId, pages)\n        if (pageProps === null) {\n            return (\n                <NotFoundPage />\n            )\n        } else {\n            return (<>\n                <Page\n                    {...pageProps}\n                />\n                <AppCmsUi />\n            </>)\n        }\n    }\n    //Constants\n    const isLoading = (pages === null)\n    //Render\n    if (isLoading) {\n        return getLoadingPage()\n    } else {\n        return getCurrentPage()\n    }\n}\n\nexport default Body\n","import { getInitialAppState } from \"../initialState\"\n\n\nconst App = (state=getInitialAppState(), action) => {\n    switch (action.type) {\n        case FETCH_PAGES: \n            return {\n                ...state,\n                pages: null,\n                requesting: true\n            }\n        case RECEIVE_PAGES:\n            const { receivedPages } = action.payload\n            return {\n                ...state,\n                requesting: false,\n                pages: receivedPages\n            }\n        case PAGE_ACTION: \n            const { pageId, pageAction } = action.payload\n            const pageState = {}\n            const newPageState = PageReducer(pageState, pageAction)\n            const pagesWithUpdatedPage = immutableReplace(\n                pageId, newPageState, state.pages\n            )\n            return {\n                ...state,\n                pages: pagesWithUpdatedPage\n            }\n        default: \n            return state\n    }\n}\n\n\n/////////\n/////////\n\n\nconst compositeReducer = combineReducers({\n    App\n})\n\n\nexport default compositeReducer","import { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport App from '../reducer'\n\nexport const initStore = (\n    externalReducers={},\n    preloadedState=null,\n    isDev=false\n) => {\n    //Combine reducers.\n    const compositeReducer = combineReducers({\n        App,\n        ...externalReducers\n    })\n    //\n    const devtools = (\n        isDev ?\n            composeWithDevTools(applyMiddleware()) :\n            null\n    )\n    //Create store.\n    const store = createStore(\n        compositeReducer,\n        preloadedState,\n        devtools\n    )\n    return store\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { defaultOptions } from './util/options'\nimport { setInitialAppState } from './redux/initialState'\nimport Body from './body'\nimport { initStore } from './redux/store'\n\n\n///////////\n///////////\n\n\nconst runApp = async (options={}) => {\n    //Merge with default options\n    options = {\n        ...defaultOptions,\n        ...options\n    }\n    //Set 'isCms' in initial app state.\n    setInitialAppState({ isCms: options.isCms })\n    //Create store.\n    const store = initStore(\n        options.reducer,\n        options.preloadedState,\n        options.isDev\n    )\n    //Getters\n    const getCmsOverlay = () => (\n        options.isCms ?\n            options.cmsOverlay : null\n    )\n    //Define App\n    const App = () => (\n        <Provider store={store}>\n            <BrowserRouter>\n                <Header />\n                <Body />\n                <Footer />\n                { getCmsOverlay() }\n            </BrowserRouter>\n        </Provider>\n    )\n    const rootElement = (\n        document.getElementyById(\"blux-app\")\n    )\n    //Render App\n    ReactDOM.render(\n        App, rootElement\n    )\n}\n\n\n//////////////\n//////////////\n\n\nexport default runApp"]}